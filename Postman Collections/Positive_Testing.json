{
  "info": {
    "_postman_id": "d94f1698-aba9-45fb-b988-5ac66f23f603",
    "name": "Positive Testing",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Get a list of users",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "3dfdc50b-b408-4fc2-a28f-099d3cc464d3",
            "exec": [
              "pm.test(\"Status code is 200 OK\", () => {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "})",
              "",
              "pm.test(\"Response payload is in JSON object format\", () => {",
              "    pm.expect(pm.response).to.be.an(\"object\");",
              "})",
              "",
              "// Body response in JSON format",
              "const body = pm.response.json();",
              "",
              "pm.test(\"Response body has all main property names\", () => {",
              "    pm.expect(body).has.property(\"page\");",
              "    pm.expect(body).has.property(\"per_page\");",
              "    pm.expect(body).has.property(\"total\");",
              "    pm.expect(body).has.property(\"total_pages\");",
              "    pm.expect(body).has.property(\"data\");",
              "})",
              "",
              "pm.test(\"Response body property names have the correct values\", () => {",
              "    pm.expect(body.page).to.equal(1);",
              "    pm.expect(body.per_page).to.equal(6);",
              "    pm.expect(body.total).to.equal(12);",
              "    pm.expect(body.total_pages).to.equal(2);",
              "})",
              "",
              "pm.test(\"Response body property names have the correct value type\", () => {",
              "    pm.expect(body.page).to.be.a(\"number\");",
              "    pm.expect(body.per_page).to.be.a(\"number\");",
              "    pm.expect(body.total).to.be.a(\"number\");",
              "    pm.expect(body.total_pages).to.be.a(\"number\");",
              "    pm.expect(body.data).to.be.an(\"array\");",
              "})",
              "",
              "pm.test(\"First listed username starts with an id equals to 1\", () => {",
              "    pm.expect(body.data[0]).has.property(\"id\",1);",
              "})",
              "",
              "pm.test(\"Response header 'Content-Type' exists and its value is correct\", () => {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json; charset=utf-8\");",
              "})",
              "",
              "pm.test(\"Response time is acceptable, (below 2000ms)\", () => {",
              "    pm.expect(pm.response.responseTime).to.below(2000);",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "_postman_id": "5d5dd7ad-b1a1-4dc8-981a-d2e2deb28d25",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [],
        "url": "https://reqres.in/api/users"
      },
      "response": []
    },
    {
      "name": "Get a single user",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "3cabf899-8e05-4d3e-8ca7-20fb59d5c29f",
            "exec": [
              "pm.test(\"Status code is 200 OK\", () => {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "})",
              "",
              "pm.test(\"Response payload is in JSON format\", () => {",
              "    pm.expect(pm.response).to.be.an(\"object\");",
              "})",
              "",
              "// Response body in JSON format",
              "let body = pm.response.json();",
              "",
              "pm.test(\"Response body has expected property names\", () => {",
              "    pm.expect(body).to.have.property(\"data\");",
              "    pm.expect(body.data).to.have.nested.property(\"id\");",
              "    pm.expect(body.data).to.have.nested.property(\"email\");",
              "    pm.expect(body.data).to.have.nested.property(\"first_name\");",
              "    pm.expect(body.data).to.have.nested.property(\"last_name\");",
              "    pm.expect(body.data).to.have.nested.property(\"avatar\");",
              "})",
              "",
              "pm.test(\"Response body has expected user values\", () => {",
              "    pm.expect(body.data.id).to.equal(5);",
              "    pm.expect(body.data.email).to.equal(\"charles.morris@reqres.in\");",
              "    pm.expect(body.data.first_name).to.equal(\"Charles\");",
              "    pm.expect(body.data.last_name).to.equal(\"Morris\");",
              "    pm.expect(body.data.avatar).to.equal(\"https://reqres.in/img/faces/5-image.jpg\");",
              "})",
              "",
              "pm.test(\"Response body property values have expected data type\", () => {",
              "    pm.expect(body.data.id).is.a(\"number\");",
              "    pm.expect(body.data.email).is.a(\"string\");",
              "    pm.expect(body.data.first_name).is.a(\"string\");",
              "    pm.expect(body.data.last_name).is.a(\"string\");",
              "    pm.expect(body.data.avatar).is.a(\"string\");",
              "})",
              "",
              "pm.test(\"Response headers 'Content-Type' and 'Connection' are present\", () => {",
              "    pm.response.to.have.header(\"Content-Type\");",
              "    pm.response.to.have.header(\"Connection\");",
              "})",
              "",
              "pm.test(\"Response headers 'Content-Type' and 'Connection' have expected value\", () => {",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json; charset=utf-8\");",
              "    pm.expect(pm.response.headers.get(\"Connection\")).to.equal(\"keep-alive\");",
              "})",
              "",
              "pm.test(\"Response time is acceptable (below 2000ms)\", () => {",
              "    pm.expect(pm.response.responseTime).to.below(2000);",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "_postman_id": "e03d8cb2-0108-4930-a21e-14a1e7e0d4d1",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [],
        "url": "https://reqres.in/api/users/5"
      },
      "response": []
    },
    {
      "name": "Create a new user",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "92f60589-70ec-439f-bd22-7887bf89d382",
            "exec": [
              "pm.test(\"Response code is 201 (Created)\", () => {",
              "    pm.expect(pm.response.code).to.equal(201);",
              "})",
              "",
              "pm.test(\"Response payload is in JSON format\", () => {",
              "    pm.expect(pm.response).to.be.an(\"object\");",
              "})",
              "",
              "// Response body in JSON",
              "const body = pm.response.json();",
              "",
              "pm.test(\"Response body has expected properties\", () => {",
              "    pm.expect(body).to.have.property(\"name\");",
              "    pm.expect(body).to.have.property(\"job\");",
              "    pm.expect(body).to.have.property(\"id\");",
              "    pm.expect(body).to.have.property(\"createdAt\");",
              "})",
              "",
              "pm.test(\"Response body main properties have correct values\", () => {",
              "    pm.expect(body.name).to.equal(\"morpheus\");",
              "    pm.expect(body.job).to.equal(\"leader\");",
              "})",
              "",
              "pm.test(\"Response body property values have correct data type\", () => {",
              "    pm.expect(body.name).to.be.a(\"string\");",
              "    pm.expect(body.job).to.be.a(\"string\");",
              "    pm.expect(body.id).to.be.a(\"string\");",
              "    pm.expect(body.createdAt).to.be.a(\"string\");",
              "})",
              "",
              "pm.test(\"Response time is acceptable (below 2000ms)\", () => {",
              "    pm.expect(pm.response.responseTime).to.below(2000);",
              "})",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "_postman_id": "430cefae-8130-487c-a390-247a9b7177cc",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"leader\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "https://reqres.in/api/users"
      },
      "response": []
    },
    {
      "name": "Update user job",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "81e2ddc4-2e5e-4b72-8983-be793966db75",
            "exec": [
              "pm.test(\"Response code is 200 or 201\", () => {",
              "    pm.expect(pm.response.code).oneOf([200,201]);",
              "})",
              "",
              "pm.test(\"Response payload is in JSON format\", () => {",
              "    pm.expect(pm.response).to.be.an(\"object\");",
              "})",
              "",
              "// Response body in JSON",
              "const body = pm.response.json();",
              "",
              "pm.test(\"Response body has expected properties\", () => {",
              "    pm.expect(body).to.have.property(\"name\");",
              "    pm.expect(body).to.have.property(\"job\");",
              "    pm.expect(body).to.have.property(\"updatedAt\");",
              "})",
              "",
              "pm.test(\"Response body main properties have correct values\", () => {",
              "    pm.expect(body.name).to.equal(\"morpheus\");",
              "    pm.expect(body.job).to.equal(\"zion resident\");",
              "})",
              "",
              "pm.test(\"Response body property values have correct data type\", () => {",
              "    pm.expect(body.name).to.be.a(\"string\");",
              "    pm.expect(body.job).to.be.a(\"string\");",
              "    pm.expect(body.updatedAt).to.be.a(\"string\");",
              "})",
              "",
              "pm.test(\"Response time is acceptable (below 2000ms)\", () => {",
              "    pm.expect(pm.response.responseTime).to.below(2000);",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "_postman_id": "ea9195a3-ded6-4cc9-bcca-4ecc246213a1",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "https://reqres.in/api/users/2"
      },
      "response": []
    },
    {
      "name": "Delete a user",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "050b4a06-acba-403e-bf80-41f9a2c066e2",
            "exec": [
              "pm.test(\"Response code is 204\", () => {",
              "    pm.expect(pm.response.code).to.equal(204);",
              "})",
              "",
              "pm.test(\"Response body is empty\", () => {",
              "    pm.expect(pm.response.body).to.not.exist;",
              "    pm.expect(pm.response.headers.get(\"Content-Length\")).to.eql(\"0\");",
              "})",
              "",
              "pm.test(\"Response time is acceptable (below 2000ms)\", () => {",
              "    pm.expect(pm.response.responseTime).to.below(2000);",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "_postman_id": "3494a0f6-caf0-44a5-9a8d-3136f17837c0",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "DELETE",
        "header": [],
        "url": "https://reqres.in/api/users/2"
      },
      "response": []
    }
  ]
}